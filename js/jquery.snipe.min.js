// Generated by CoffeeScript 1.4.0
(function() {
  var $, Bounds, Snipe, defaults, forcedCss;

  $ = jQuery;

  defaults = {
    "class": 'snipe-lens',
    size: 200,
    animation: null,
    image: null,
    css: {
      borderRadius: 200,
      width: 200,
      height: 200,
      border: '2px solid white',
      cursor: 'none',
      backgroundColor: 'white',
      boxShadow: '0 0 10px #777, 0 0 8px black inset, 0 0 80px white inset'
    },
    zoomin: function(lens) {},
    zoomout: function(lens) {},
    zoommoved: function(lend) {}
  };

  forcedCss = {
    position: 'absolute',
    top: 0,
    left: 0,
    backgroundRepeat: 'no-repeat'
  };

  Bounds = (function() {

    function Bounds(top, right, bottom, left) {
      this.top = top;
      this.right = right;
      this.bottom = bottom;
      this.left = left;
      this;

    }

    Bounds.prototype.contains = function(x, y) {
      return (this.left < x && x < this.right) && (this.top < y && y < this.bottom);
    };

    return Bounds;

  })();

  Snipe = (function() {

    function Snipe(el, settings) {
      var _this = this;
      this.el = el;
      this.el.load(function() {
        _this.body = $('body');
        _this.settings = _this.makeSettings(settings);
        _this.offset = _this.el.position();
        _this.lens = $('<div>').addClass(_this.settings["class"]).css('display', 'none').appendTo('body');
        _this.ratioEl = $('<img>').load(function() {
          return _this.calculateRatio(_this);
        }).attr('src', _this.settings.image).css('display', 'none').appendTo(_this.el.parent());
        _this.ratioX = 1;
        _this.ratioY = 1;
        return _this.bounds = new Bounds(_this.offset.top, _this.offset.left + _this.el.width(), _this.offset.top + _this.el.height(), _this.offset.left);
      });
      this.el.bind('mousemove', function(e) {
        return _this.onMouseMove(e);
      });
      this.el;
    }

    Snipe.prototype.makeSettings = function(settings) {
      defaults.image = settings.image || this.el.data('zoom') || this.el.attr('src') || this.el.find('a:first').attr('href') || this.el.find('img:first').attr('src');
      defaults.css.backgroundImage = "url(" + defaults.image + ")";
      defaults.css = $.extend({}, defaults.css, settings && settings.css, forcedCss);
      return $.extend({}, defaults, settings);
    };

    Snipe.prototype.run = function() {
      return this.hide();
    };

    Snipe.prototype.calculateRatio = function(o) {
      o.ratioX = o.ratioEl.width() / o.el.width();
      o.ratioY = o.ratioEl.height() / o.el.height();
      o.ratioEl.remove();
      o.lens.css(o.settings.css);
      o.run();
      return o;
    };

    Snipe.prototype.onMouseMove = function(e) {
      var backgroundX, backgroundY;
      if (!(this.bounds != null)) {
        return;
      } else {
        if (!this.bounds.contains(e.pageX, e.pageY)) {
          this.hide();
        }
      }
      backgroundX = -((e.pageX - this.offset.left) * this.ratioX - this.settings.size * .5);
      backgroundY = -((e.pageY - this.offset.top) * this.ratioY - this.settings.size * .5);
      return this.lens.css({
        left: e.pageX - this.settings.size * .5,
        top: e.pageY - this.settings.size * .5,
        backgroundPosition: backgroundX + 'px ' + backgroundY + 'px'
      });
    };

    /* 
    	API Methods
    */


    Snipe.prototype.show = function(animation) {
      var _this = this;
      if (animation == null) {
        animation = true;
      }
      this.lens.show();
      this.el.unbind('mousemove');
      this.el.unbind('mouseover');
      this.body.bind('mousemove', function(e) {
        return _this.onMouseMove(e);
      });
      return this;
    };

    Snipe.prototype.hide = function(animation) {
      var _this = this;
      if (animation == null) {
        animation = true;
      }
      this.lens.hide();
      this.el.bind('mouseover', function(e) {
        return _this.show();
      });
      this.body.unbind('mousemove');
      return this;
    };

    return Snipe;

  })();

  (function($) {
    return $.fn.snipe = function(settings) {
      return new Snipe(this, settings);
    };
  })(jQuery);

}).call(this);
